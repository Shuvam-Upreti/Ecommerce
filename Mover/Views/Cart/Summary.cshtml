@model Mover.ViewModel.Carts.SummaryViewModel
@{
    ViewBag.Title = "Shipping Address";
}

<style>
    .progress-steps {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 40px;
        margin: 40px 0;
    }

    .step {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .step-icon {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: #18181B;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
    }

    .main-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .address-section {
        margin-bottom: 40px;
    }

    .section-title {
        font-size: 24px;
        font-weight: 500;
        margin-bottom: 24px;
    }

    .address-instruction {
        color: #6B7280;
        margin-bottom: 24px;
    }

    .address-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .address-card {
        border: 1px solid #E5E7EB;
        border-radius: 8px;
        padding: 20px;
        position: relative;
    }

        .address-card.selected {
            border-color: #000;
        }

    .address-radio {
        position: absolute;
        right: 20px;
        top: 20px;
        width: 20px;
        height: 20px;
        cursor: pointer;
    }

    .address-name {
        font-weight: 500;
        margin-bottom: 8px;
    }

    .address-details {
        color: #6B7280;
        font-size: 14px;
        line-height: 1.5;
        margin-bottom: 16px;
    }

    .card-actions {
        display: flex;
        gap: 16px;
    }

    .action-btn {
        display: flex;
        align-items: center;
        gap: 6px;
        color: #6B7280;
        text-decoration: none;
        font-size: 14px;
    }

        .action-btn.delete {
            color: #EF4444;
        }

    .new-address-form {
        max-width: 600px;
        margin-top: 40px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        color: #374151;
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #E5E7EB;
        border-radius: 6px;
        font-size: 14px;
    }

    .form-select {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #E5E7EB;
        border-radius: 6px;
        background-color: white;
        font-size: 14px;
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%236B7280'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 12px center;
        background-size: 16px;
    }

    .order-summary {
        background: white;
        border: 1px solid #E5E7EB;
        border-radius: 8px;
        padding: 24px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 16px;
        font-size: 14px;
    }

    .discount-section {
        display: flex;
        gap: 8px;
        margin: 20px 0;
    }

    .discount-input {
        flex: 1;
        padding: 10px 12px;
        border: 1px solid #E5E7EB;
        border-radius: 6px;
        font-size: 14px;
    }

    .apply-btn {
        padding: 10px 20px;
        background: #18181B;
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        cursor: pointer;
    }

    .submit-btn {
        width: 100%;
        padding: 12px;
        background: #18181B;
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 16px;
        cursor: pointer;
        margin-top: 20px;
    }

    @@media (max-width: 768px) {
        .progress-steps {
            display: none;
        }

        .address-cards {
            grid-template-columns: 1fr;
        }

        .order-summary {
            margin-top: 30px;
        }
    }
</style>

<div class="main-container">
    @*     <div class="progress-steps">
    <div class="step">
    <div class="step-icon">1</div>
    <span>Address</span>
    </div>
    <div class="step">
    <div class="step-icon">2</div>
    <span>Payment Method</span>
    </div>
    <div class="step">
    <div class="step-icon">3</div>
    <span>Review</span>
    </div>
    </div> *@

    <form method="post" asp-area="Admin" asp-controller="Order" asp-action="PlaceOrder">
        <div class="row">
            <div class="col-lg-8">
                <div class="address-section">
                    <h1 class="section-title">Shipping Address</h1>
                    <p class="address-instruction">Is the address you'd like to use displayed below? If so, click the corresponding radio button. Or you can enter a new delivery address.</p>

                    <div class="address-cards">
                        @if (Model.ShippingDetails != null)
                        {
                            <div class="address-card">
                                <input type="radio" name="selectedAddress" class="address-radio" value="existing" checked>
                                <h3 class="address-name">@Model.ShippingDetails.CreaterName</h3>
                                <p class="address-details">
                                    @Model.ShippingDetails.ShippingAddressLine<br>
                                    @Model.ShippingDetails.ShippingCity, @Model.ShippingDetails.ShippingState @Model.ShippingDetails.ShippingZipCode
                                </p>

                            </div>

                        }
                    </div>

                    <div class="new-address-form">
                        <h2 class="section-title">Add a new address</h2>

                        <div class="form-group">
                            <label class="form-label">Name</label>
                            <input type="text" name="ShippingDetails.CreaterName" class="form-control" placeholder="Enter Name">
                        </div>

                        <div class="form-group">
                            <label class="form-label">Address Line</label>
                            <input type="text" name="ShippingDetails.ShippingAddressLine" class="form-control" placeholder="Flat, House no., Building, Company, Apartment">
                        </div>

                        <div class="form-group">
                            <label class="form-label">City</label>
                            <input type="text" name="ShippingDetails.ShippingCity" class="form-control" placeholder="Enter City">
                        </div>

                        <div class="form-group">
                            <label class="form-label">State</label>
                            <input type="text" name="ShippingDetails.ShippingState" class="form-control" placeholder="Enter State">
                        </div>

                        <div class="form-group">
                            <label class="form-label">Zip Code</label>
                            <input type="text" name="ShippingDetails.ShippingZipCode" class="form-control" placeholder="Enter Zip Code">
                        </div>

                        <button type="button" class="submit-btn" onclick="addNewAddress()">Add New Address</button>
                    </div>
                </div>
            </div>

            <div class="" style="display:none;">
                @for (int i = 0; i < Model.CartViewModel.Count; i++)
                {
                    <tr>
                        <td>
                            <input type="hidden" name="CartViewModel[@i].CartId" value="@Model.CartViewModel[i].CartId" />
                            <input type="hidden" name="CartViewModel[@i].ProductId" value="@Model.CartViewModel[i].ProductId" />
                            <input type="hidden" name="CartViewModel[@i].DiscountPercentage" value="@Model.CartViewModel[i].DiscountPercentage" />
                            <input type="text" name="CartViewModel[@i].ProductName" class="form-control" value="@Model.CartViewModel[i].ProductName" readonly />
                        </td>
                        <td>
                            <input type="text" name="CartViewModel[@i].ProductPrice" class="form-control" value="@Model.CartViewModel[i].ProductPrice" readonly />
                        </td>
                        <td>
                            <input type="text" name="CartViewModel[@i].Quantity" class="form-control" value="@Model.CartViewModel[i].Quantity" readonly />
                        </td>
                        <td>
                            <input type="text" name="CartViewModel[@i].TotalPrice" class="form-control" value="@Model.CartViewModel[i].TotalPrice" readonly />
                        </td>
                    </tr>
                }
            </div>




            <div class="col-lg-4">
                <div class="order-summary">
                    <div class="summary-row">
                        <span>Subtotal</span>
                        <span>$@Model.SummaryTotalPrice.ToString("F2")</span>
                    </div>

                    @*  <div class="discount-section">
                    <input type="text" class="discount-input" placeholder="Enter Discount Code">
                    <button type="button" class="apply-btn">Apply</button>
                    </div> *@

                    <div class="summary-row">
                        <span>Delivery Charge</span>
                        <span>Rs. 50.00</span>
                    </div>

                    <hr>

                    <div class="summary-row">
                        <input type="hidden" name="SummaryTotalPrice" value="@(Model.SummaryTotalPrice + 50)" />
                        <strong>Grand Total</strong>
                        <strong>$@(Model.SummaryTotalPrice + 50)</strong>
                    </div>

                    <button type="submit" class="submit-btn">Place Order</button>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script>

        function addNewAddress() {
            // Create new address card from form data
            const form = document.querySelector('.new-address-form');
            const name = form.querySelector('[name="ShippingDetails.CreaterName"]').value;
            const address = form.querySelector('[name="ShippingDetails.ShippingAddressLine"]').value;
            const city = form.querySelector('[name="ShippingDetails.ShippingCity"]').value;
            const state = form.querySelector('[name="ShippingDetails.ShippingState"]').value;
            const zip = form.querySelector('[name="ShippingDetails.ShippingZipCode"]').value;

            const newCard = document.createElement('div');
            newCard.className = 'address-card';
            newCard.innerHTML = `
                    <input type="radio" name="selectedAddress" class="address-radio" value="new">
                    <h3 class="address-name">${name}</h3>
                    <p class="address-details">${address}<br>${city}, ${state} ${zip}</p>
                    <div class="card-actions">
                        <a href="#" class="action-btn">
                            <i class="bi bi-pencil"></i> Edit
                        </a>
                        <a href="#" class="action-btn delete">
                            <i class="bi bi-trash"></i> Delete
                        </a>
                    </div>
                                                            `;

            document.querySelector('.address-cards').appendChild(newCard);
            form.reset();
        }

        // Handle radio button selection
        document.addEventListener('change', function (e) {
            if (e.target.matches('.address-radio')) {
                document.querySelectorAll('.address-card').forEach(card => {
                    card.classList.remove('selected');
                });
                e.target.closest('.address-card').classList.add('selected');
            }
        });
        document.addEventListener("DOMContentLoaded", function () {
            // Add event listener for delete buttons (including dynamically added ones)
            document.addEventListener("click", function (event) {
                if (event.target.closest(".delete")) {
                    event.preventDefault();
                    const card = event.target.closest(".address-card");
                    const parentContainer = document.querySelector(".address-cards");

                    if (card) {
                        const wasSelected = card.querySelector(".address-radio").checked; // Check if it was selected
                        card.remove(); // Remove the address card from the DOM

                        // If the deleted card was selected, select the first remaining card
                        const remainingCards = parentContainer.querySelectorAll(".address-card .address-radio");
                        if (wasSelected && remainingCards.length > 0) {
                            remainingCards[0].checked = true;
                            remainingCards[0].closest(".address-card").classList.add("selected");
                        }
                    }
                }
            });
        });
        document.addEventListener("DOMContentLoaded", function () {
            const addressRadios = document.querySelectorAll(".address-radio");

            addressRadios.forEach(radio => {
                radio.addEventListener("change", function () {
                    updateSelectedAddress();
                });
            });

            function updateSelectedAddress() {
                const selectedRadio = document.querySelector(".address-radio:checked");
                const selectedCard = selectedRadio.closest(".address-card");

                if (selectedCard) {
                    // Extract details from the selected card
                    const name = selectedCard.querySelector(".address-name")?.textContent.trim() || "";
                    const addressDetails = selectedCard.querySelector(".address-details")?.innerHTML.trim().split("<br>") || ["", ""];

                    const shippingAddress = addressDetails[0]?.trim() || "";
                    const cityStateZip = addressDetails[1]?.trim() || "";
                    const [city, stateZip] = cityStateZip.split(",");
                    const [state, zip] = stateZip ? stateZip.trim().split(" ") : ["", ""];

                    // Update hidden fields for form submission
                    document.querySelector("input[name='ShippingDetails.CreaterName']").value = name;
                    document.querySelector("input[name='ShippingDetails.ShippingAddressLine']").value = shippingAddress;
                    document.querySelector("input[name='ShippingDetails.ShippingCity']").value = city?.trim();
                    document.querySelector("input[name='ShippingDetails.ShippingState']").value = state?.trim();
                    document.querySelector("input[name='ShippingDetails.ShippingZipCode']").value = zip?.trim();
                }
            }

            // Set initial values on page load
            updateSelectedAddress();
        });

    </script>


}